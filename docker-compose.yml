x-environment: &env-config
  env_file:
    - ${ENV_FILE:-.env}

services:
  db:
    image: postgres:15
    container_name: x_tracker_postgres
    environment:
      POSTGRES_DB: x_tracker_db
      POSTGRES_USER: x_tracker_user
      POSTGRES_PASSWORD: alamin786
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - my_network
    ports:
      - "5432:5432"

  redis:
    image: redis:7
    container_name: x_tracker_redis
    ports:
      - "6379:6379"
    networks:
      - my_network

  backend:
    build: ./backend
    container_name: x_tracker_backend
    volumes:
      - ./backend:/app
      - static_volume:/app/static
    ports:
      - "8000:8000"
    <<: *env-config
    depends_on:
      - db
      - redis
    command: >-
      sh -c "${BACKEND_COMMAND:-python manage.py wait_for_db && 
      python manage.py migrate && 
      python manage.py runserver 0.0.0.0:8000}"
    networks:
      - my_network

  celery_worker:
    build: ./backend
    container_name: x_tracker_celery_worker
    volumes:
      - ./backend:/app
    <<: *env-config
    depends_on:
      - db
      - redis
    command: celery -A config worker -l ${LOG_LEVEL:-INFO}
    networks:
      - my_network
    restart: unless-stopped

  celery_beat:
    build: ./backend
    container_name: x_tracker_celery_beat
    volumes:
      - ./backend:/app
    <<: *env-config
    depends_on:
      - db
      - redis
      - celery_worker
    command: celery -A config beat -l ${LOG_LEVEL:-INFO} --scheduler django_celery_beat.schedulers:DatabaseScheduler
    networks:
      - my_network
    restart: unless-stopped

  frontend:
    build: ./frontend
    container_name: x_tracker_frontend
    volumes:
      - ./frontend:/app
      - /app/node_modules  # Keep this to store node_modules inside the container
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - REACT_APP_API_URL=${REACT_APP_API_URL:-http://localhost:8000}
    command: ${FRONTEND_COMMAND:-npm start}
    depends_on:
      - backend
    networks:
      - my_network

  nginx:
    image: nginx:alpine
    container_name: x_tracker_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - static_volume:/code/static
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - my_network
    profiles:
      - production

networks:
  my_network:

volumes:
  postgres_data:
  static_volume:
# Define a reusable environment configuration
x-env-config: &env-config
  env_file:
    - ${ENV_FILE:-.env}

services:
  # Database service configuration
  db:
    image: postgres:17.2-alpine3.21
    container_name: x_tracker_db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}  # Remove default value
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}  # Remove default value
      POSTGRES_DB: ${POSTGRES_DB}  # Remove default value
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - my_network
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  pgadmin :
    image: dpage/pgadmin4:latest
    container_name: x_tracker_pgadmin
    restart: always
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_CONFIG_ENHANCED_COOKIE_PROTECTION: ${PGADMIN_CONFIG_ENHANCED_COOKIE_PROTECTION}
    ports:
      - "5050:80"
    networks:
      - my_network
    depends_on:
      db:
        condition: service_healthy  # Wait for DB to be ready

  redis:
    image: redis:latest
    container_name: x_tracker_redis
    restart: always
    command: redis-server /usr/local/etc/redis/redis.conf
    environment:
      REDIS_PASSWORD: alamin786
    volumes:
      - ./redis.conf:/usr/local/etc/redis/redis.conf
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - my_network
    security_opt:
      - "no-new-privileges:true"
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -a $${REDIS_PASSWORD} ping | grep PONG"]
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: x_tracker_backend
    volumes:
      - ./backend:/app
      - static_volume:/app/static
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy # Wait for DB to be ready
      redis:
        condition: service_healthy # Wait for Redis to be ready
    command: >-
      sh -c "${BACKEND_COMMAND:-python manage.py wait_for_db && 
      python manage.py migrate && 
      python manage.py create_superuser &&
      python manage.py runserver 0.0.0.0:8000}"
    networks:
      - my_network
    <<: *env-config
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8000/health/ || exit 1"]
      interval: 15s  # Increased from 10s
      timeout: 10s    # Increased from 5s
      retries: 5      # Increased from 5
      start_period: 30s  # Add warmup time

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: x_tracker_frontend
    env_file:  # Add this to load .env variables
      - .env
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:8000}
    command: ${FRONTEND_COMMAND:-npm start}
    depends_on:
      backend:
        condition: service_healthy # Wait for backend to be ready
    networks:
      - my_network
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:3000 || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3

  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: x_tracker_celery_worker
    env_file:  # Add this to load .env variables
      - .env
    volumes:
      - ./backend:/app
    depends_on:
      db:
        condition: service_healthy # Wait for db to be ready
      redis:
        condition: service_healthy # Wait for Redis to be ready
    command: celery -A config worker -l ${LOG_LEVEL:-INFO}
    networks:
      - my_network
    restart: unless-stopped
    <<: *env-config
    healthcheck:
      test: ["CMD-SHELL", "celery -A config inspect ping -d celery@$$HOSTNAME | grep OK"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: x_tracker_celery_beat
    env_file:  # Add this to load .env variables
      - .env
    volumes:
      - ./backend:/app
    <<: *env-config
    depends_on:
      db:
        condition: service_healthy # Wait for db to be ready
      redis:
        condition: service_healthy # Wait for redis to be ready
      celery_worker:
        condition: service_healthy # Wait for celery_worker to be ready
    command: celery -A config beat -l ${LOG_LEVEL:-INFO} --scheduler django_celery_beat.schedulers:DatabaseScheduler
    networks:
      - my_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M

  flower:
    image: mher/flower
    container_name: x-tracker-flower
    command: ["flower", "--broker=redis://redis:6379/0", "--port=5555"]
    ports:
      - "5555:5555"
    depends_on:
      - redis                   # Wait for redis to be ready
      - celery_worker           # Wait for celery_worker to be ready

  nginx:
    image: nginx:alpine
    container_name: x_tracker_nginx
    env_file:  # Add this to load .env variables
      - .env
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - static_volume:/app/static
    depends_on:
      backend:
        condition: service_healthy  # Wait for db to be ready
      frontend:
        condition: service_healthy  # Wait for db to be ready
    restart: unless-stopped
    networks:
      - my_network
    profiles:
      - production

networks:
  my_network:
    driver: bridge

volumes:
  postgres_data:
  static_volume:
  redis_data:
  pgadmin_data: